"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// src/routes.ts
const express_1 = require("express");
const userController_1 = require("./controllers/userController");
const adminController_1 = require("./controllers/adminController");
const questionController_1 = require("./controllers/questionController");
const auth_1 = require("./middleware/auth");
const adminUserController_1 = require("./controllers/adminUserController");
const testController_1 = require("./controllers/testController");
const reportController_1 = require("./controllers/reportController");
const statsController_1 = require("./controllers/statsController");
const router = (0, express_1.Router)();
router.post('/user', userController_1.handleNewUser);
router.get('/user', userController_1.getUserByEmail);
router.get('/question/:id', questionController_1.getQuestionById);
router.get('/admin/users', auth_1.authenticate, adminController_1.isAdmin, adminUserController_1.getAllUsers);
router.put('/admin/users/:id', auth_1.authenticate, adminController_1.isAdmin, adminUserController_1.updateUser);
router.delete('/admin/users/:id', auth_1.authenticate, adminController_1.isAdmin, adminUserController_1.deleteUser);
router.put('/users/update-username', auth_1.authenticate, userController_1.updateUsername);
router.get('/admin/questions', auth_1.authenticate, adminController_1.isAdmin, adminController_1.getAllQuestions);
router.post('/admin/questions', auth_1.authenticate, adminController_1.isAdmin, adminController_1.createQuestion);
router.put('/admin/questions/:id', auth_1.authenticate, adminController_1.isAdmin, adminController_1.updateQuestion);
router.delete('/admin/questions/:id', auth_1.authenticate, adminController_1.isAdmin, adminController_1.deleteQuestion);
router.get('/admin/question-stats', auth_1.authenticate, adminController_1.isAdmin, questionController_1.getAllQuestionStats);
router.get('/questions/road-signs', questionController_1.getRoadSigns);
router.post('/tests/start', auth_1.authenticate, testController_1.startTest);
router.post('/tests/finish', auth_1.authenticate, testController_1.finishTest);
router.get('/user/tests', auth_1.authenticate, testController_1.getUserTests);
router.post('/question-stats', auth_1.authenticate, testController_1.recordQuestionStat);
router.post('/user-answers', auth_1.authenticate, testController_1.recordUserAnswer);
//ADMIN
router.get('/admin/tests', auth_1.authenticate, adminController_1.isAdmin, testController_1.getAllTests);
router.delete("/admin/tests/:id", auth_1.authenticate, adminController_1.isAdmin, testController_1.deleteTest);
router.post('/report', auth_1.authenticate, reportController_1.createReport);
router.get('/admin/report', auth_1.authenticate, adminController_1.isAdmin, reportController_1.getAllReports);
router.post('/admin/reports/:id/review', auth_1.authenticate, adminController_1.isAdmin, reportController_1.markReportReviewed);
router.post('/admin/reports/:id/resolve', auth_1.authenticate, adminController_1.isAdmin, reportController_1.markReportResolved);
router.delete('/admin/reports/:id/delete', auth_1.authenticate, adminController_1.isAdmin, reportController_1.deleteReport);
router.get('/user/stats/tests', auth_1.authenticate, statsController_1.getTestStats);
router.get('/user/stats/answers', auth_1.authenticate, statsController_1.getAnswerStats);
router.get('/user/stats/badges', auth_1.authenticate, statsController_1.getBadgeStats);
router.get('/user/stats/worst-accuracy', auth_1.authenticate, statsController_1.getWorstAccuracyQuestions);
router.get('/user/stats/test-summary', auth_1.authenticate, statsController_1.testsTakenAndPassedByUser);
router.get('/admin/stats/tests', auth_1.authenticate, adminController_1.isAdmin, statsController_1.getAdminTestStats);
router.get('/user/stats/streak', auth_1.authenticate, statsController_1.getUserStreak);
exports.default = router;
