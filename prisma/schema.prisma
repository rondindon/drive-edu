generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  role         String        @default("USER")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  username     String?       @unique
  badges       Badge[]
  tests        Test[]
  wrongAnswers WrongAnswer[]
}

model Question {
  id            Int            @id @unique @default(autoincrement())
  text          String
  options       String[]
  correctAnswer String
  imageUrl      String?
  difficulty    String
  explanation   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  category      String
  groups        String[]
  points        Int
  wrongAnswers  WrongAnswer[]
  testQuestions TestQuestion[]
}

model Test {
  id             Int            @id @default(autoincrement())
  userId         Int
  group          String
  score          Float          @default(0)
  totalQuestions Int            @default(40)
  timeTaken      Int            @default(0)
  isPassed       Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id])
  testQuestions  TestQuestion[]
}

model TestQuestion {
  id         Int      @id @default(autoincrement())
  testId     Int
  questionId Int
  test       Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model WrongAnswer {
  id         Int      @id @default(autoincrement())
  userId     Int
  questionId Int
  attempts   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Badge {
  id          Int      @id @default(autoincrement())
  userId      Int
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}
